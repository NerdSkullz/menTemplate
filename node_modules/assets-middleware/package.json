{
  "name": "assets-middleware",
  "version": "0.0.3",
  "description": "Abstract asset middleware for compilation, concatenation, and post-processing.",
  "author": {
    "name": "Adam Ahmed",
    "email": "hitsthings@gmail.com",
    "url": "http://www.noiregrets.com"
  },
  "keywords": [
    "asset",
    "assets",
    "concatenation",
    "middleware"
  ],
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/hitsthings/assets-middleware.git"
  },
  "dependencies": {
    "mkdirp": "0.3.5"
  },
  "devDependencies": {
    "coffee-script": "1.6.3",
    "uglify-js": "2.3.6",
    "express": "~3.0.0"
  },
  "globalDevDependencies": {
    "jshint": "~2.1.9",
    "jasmine-node": "~1.10.2"
  },
  "jshintConfig": {
    "node": true,
    "expr": true,
    "eqnull": true
  },
  "readme": "assets-middleware\n=================\n\nAbstract Express/Connect middleware for dealing with static assets like JS and CSS\n\nHigher-level middleware (like LESS, Stylus, Coffeescript compilation, minifying, etc) or combinations of them can be built on top of this.\n\n## Installation\n\n```bash\nnpm install assets-middleware\n```\n\n## Usage\n\nHere is an example that takes `.coffee` and `.js` files from the `./public` directory and the `./lib/jquery.js` file, calls `compile` on any CoffeeScript files, and then calls `minify` on the concatenated content.\n\n```js\nvar app = require('express')();\nvar assets = require('assets-middleware');\n\napp.get('/my-scripts.js', assets({\n    src : [ './public', './lib/jquery.js' ],\n    pipeline : {\n        prefilter : [ 'coffee', 'js' ],\n        // don't include CSS files. You could use [ 'less', 'css' ] for them\n\n        // compile any .coffee files\n        mapContent : function(content, file, next) {\n            file.extname === '.coffee' ?\n                compile(content, next) :\n                next(null, content);\n        },\n\n        // minify the batch\n        postReduceContent : function (concatenatedContent, next) {\n            minify(concatenatedContent, next);\n        }\n    }\n}));\n\napp.listen(8080);\n```\n\n## Options\n\n| Option     | Default          | Allowed values | Description\n|------------|------------------|----------------|-------------|\n| `dest`     | `identitySync`   | `path`, `function(path) : path`               | The file path to write the resulting asset to. |\n| `src`      | `'./public'`     | `path`, `[path]`, `function(path, callback)`  | The file paths and directories to read from. The passed in path is the destination file |\n| `prefix`   | `'/'`            | `string`                                      | A prefix to remove from the URL path when converting it to a local file path. This is called before dest |\n| `encoding` | `'utf8'`         | `string`                                      | The encoding to use for reading and writing files. |\n| `force`    | `'ifnewer'`      | `true`, `false`, `'ifnewer'`                  | Where to force regeneration on every request (`true`), if the last generated file is older than any source file (`'ifnewer'`) or only if the file doesn't exist (`false`) |\n| `serve`    | `true`           | `true`, `false`                               | Whether to serve the generated file. If set to false, you'll have to use a static middleware to serve the file yourself. |\n| `logger`   | `null`           | `function(string, level)`                     | An optional logger function that is called with a string output and string log level (`'error'`, `'warn'`, `'info'`, `'debug'`) |\n| `pipeline` | streamy pipeline | `Object`                                      | An object where each key is a step and its value is the function to execute. See the pipeline tables below |\n\n### Pipeline - Stringy\n\n| Step                | Default     | Allowed values                                         | Description |\n|---------------------|-------------|--------------------------------------------------------|-------------|\n| `prefilter`         | `asyncTrue` | `extension`, `[extension]`, `function(file, callback)` | This step offers a way to filter out files that shouldn't be included before any heavy processing is done. It can be a function, or use the extension-filtering shorthand. |\n| `mapContent`        | `identity`  | `function(content, file, callback)`                    | This step is where you transform the input content into output content. |\n| `filter`            | `asyncTrue` | `function(file, callback)`                             | This step offers you a last ditch spot to exclude files from the output. You will rarely need to specify this step. |\n| `postReduceContent` | `identity`  | `function(content, callback)`                          | This step is where you can act on the combined content of all your source files. |\n\n### Pipeline - Streamy\n\n| Step                | Default     | Allowed values                                         | Description |\n|---------------------|-------------|--------------------------------------------------------|-------------|\n| `prefilter`  | `asyncTrue`            | `extension`, `[extension]`, `function(file, callback)` | This step offers a way to filter out files that shouldn't be included before any heavy processing is done. It can be a function, or use the extension-filtering shorthand. |\n| `map`        | `identity`             | `function(content, file, callback)`        | This step is where you transform the input content into output content. |\n| `filter`     | `asyncTrue`            | `function(file, callback)`                 | This step offers you a last ditch spot to exclude files from the output. You will rarely need to specify this step. |\n| `reduceSeed` | `createWritableStream` | `function(path, callback)` | Generate a Writable stream from the output file path. |\n| `reduce`     | `pipe`                 | `function(writable, readable, callback)`   | Pipe your Readable stream into the Writable stream. |\n| `postReduce` | `identity`             | `function(content, callback)`              | This step is where you can act on the combined content of all your source files. |\n\n## Standard parameter shapes\n\n| Parameter   | Shape    |\n|-------------|----------|\n| `extension` | `string` |\n| `path`      | `string` |\n| `content`   | `string` |\n| `file`      | `{ path : string, stat : stat, extname : string, mapped : ?* }` |\n| `seed`      | `Writable`, `{ path : string, content : string }` |\n| `callback`  | `function(err, result)` |\n\n* Note that \"mapped\" is only present in a `file` after the map step. In the stringy pipeline, it's a content string. In the streamy pipeline, it's a `Readable` stream.\n\n## Tutorial\n\nWe're going to set up a basic compile + minify filter. Step one is to pick our source directories and files:\n\n```js\napp.get('/my-scripts.js', assets({\n    src : [ './public', './lib/jquery.js' ]\n}));\n```\n\nWe can choose a destination too. The default is to use the URL path, relative to the current working directory.\n\n```js\napp.get('/my-scripts.js', assets({\n    src : [ './public', './lib/jquery.js' ],\n    dest : './new-location.js'\n}));\n```\n\nThe above example would take all the files in `./public` and the single `./lib/jquery.js` file and\nconcatenate them into `./my-location.js`. This is of somewhat questionable value since CSS and JS files\nthat exist under `./public` would all be included in the same output.\n\nSo let's work with this a bit more. assets-middleware gives you an optional pipeline for transforming your files. You can `prefilter` files based on the path, `map` to transform the content, `filter` them again if necessary, and `reduce` to combine them.\n\nSo let's filter out just the JS and skip CSS files. We can do this in our \"prefilter\" step:\n\n```js\napp.get('/my-scripts.js', assets({\n    pipeline : { prefilter : 'js' },\n    src : [ './public', './lib/jquery.js' ], // specify the source files\n}));\n```\n\nBut maybe you like CoffeeScript. Let's include those too, and compile them in the \"mapContent\" step of the\npipeline:\n\n```js\nvar path = require('path');\nvar fs = require('fs');\nvar coffee = require('coffee-script');\nfunction compile(code, next) {\n    try {\n        next(null, coffee.compile(code));\n    } catch(e) { // compile error\n        next(e);\n    }\n}\n\napp.get('/my-scripts.js', assets({\n    pipeline : {\n        prefilter : [ 'coffee', 'js' ],\n        mapContent : function(content, file, next) {\n            file.extname === '.coffee' ?\n                compile(content, next) :\n                next(null, content);\n        }\n    },\n    src : [ './public', './lib/jquery.js' ]\n}));\n```\n\nAnd you want it minified? Well then we should do that in the `postReduceContent` step:\n\n```js\nvar uglify = require('uglify-js');\nfunction minify(code, next) {\n    try {\n        next(null, uglify.minify(code, { fromString : true }).code);\n    } catch (e) {\n        next(e);\n    }\n}\n\napp.get('/my-scripts.js', assets({\n    pipeline : {\n        prefilter : [ 'coffee', 'js' ],\n        mapContent : function(content, file, next) {\n            file.extname === '.coffee' ?\n                compile(content, next) :\n                next(null, content);\n        },\n        postReduceContent : function (concatenatedContent, next) {\n            minify(concatenatedContent, next);\n        }\n    },\n    src : [ './public', './lib/jquery.js' ]\n}));\n```\n\nAnd you're done!\n\n## Changelog\n\n| Version | Changes |\n|---------|---------|\n| 0.0.3   | Add `serve` option and ignore destination file when in a source directory. |\n| 0.0.2   | Respect falsy `force` values |\n| 0.0.1   | Initial npm publish |",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hitsthings/assets-middleware/issues"
  },
  "_id": "assets-middleware@0.0.3",
  "dist": {
    "shasum": "062824550db7e0ded82cd6015ffe880a7003db0e",
    "tarball": "http://registry.npmjs.org/assets-middleware/-/assets-middleware-0.0.3.tgz"
  },
  "_from": "assets-middleware@latest",
  "_npmVersion": "1.2.32",
  "_npmUser": {
    "name": "hitsthings",
    "email": "hitsthings@gmail.com"
  },
  "maintainers": [
    {
      "name": "hitsthings",
      "email": "hitsthings@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "062824550db7e0ded82cd6015ffe880a7003db0e",
  "_resolved": "https://registry.npmjs.org/assets-middleware/-/assets-middleware-0.0.3.tgz",
  "homepage": "https://github.com/hitsthings/assets-middleware#readme"
}
